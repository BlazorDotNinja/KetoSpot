@page "/admin/items"
@layout UserContextLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page">
	@if (_categories == null)
	{
		<div class="blazor-ninja-flashing"></div>
	}
	else
	{
		<div class="blazor-ninja-form-container admin-items-container">
			<div>
				<a href="/admin/item" class="btn btn-primary" target="_blanks">Add</a>
			</div>
			@foreach (var item in _items)
			{
				<div>
					<DataView NamespaceLabel="MenuItem"
					          Item=@item
					          FieldGroups="@GetFieldGroups()"
					          ReferenceValueCallback="GetReferenceValueAsync">
					</DataView>
					<a href="/admin/item/@item.Id" class="btn btn-primary" target="_blanks">Edit</a>
					<button class="btn btn-primary" @onclick="(() => DeleteAsync(item.Id))">Delete</button>
				</div>

			}
		</div>
	}
</div>

@code {
	private IDataProxy<GenericIdDataObject> _categoryProxy;
	private IDataProxy<MenuItem> _itemProxy;

	private List<GenericIdDataObject> _categories;

	private List<MenuItem> _items;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var token = await GetContextTokenAsync();

		_categoryProxy = ProxyFactory.GetDataProxyForNamespace<GenericIdDataObject>(token, nameof(MenuItemCategory));

		_itemProxy = ProxyFactory.GetDataProxy<MenuItem>(token);

		var categoryPage = await _categoryProxy.GetPageAsync(
			Filter<GenericIdDataObject>.Empty,
		0,
		int.MaxValue,
			SortOrder<GenericIdDataObject>.Empty);

		_categories = categoryPage.Items;

		var itemFrame = await _itemProxy.GetFrameAsync(
			Filter<MenuItem>.Empty,
			0,
			int.MaxValue,
			SortOrder<MenuItem>.Empty);

		_items = itemFrame.Items;
	}

	private async Task DeleteAsync(string id)
	{
		await _itemProxy.DeleteAsync(id);

		_items.RemoveAll(it => it.Id == id);
	}

	private List<FieldGroup> GetFieldGroups()
	{
		var groups = new List<FieldGroup>();

		var group = new FieldGroup
		{
			Label = "Basic",
			FieldLabels = new List<string> { "PhotoUrl", "Label" }
		};

		groups.Add(group);

		return groups;
	}

	private async Task<GenericIdDataObject> GetReferenceValueAsync(
		string fieldLabel,
		string id)
	{
		await Task.Delay(0);

		if (fieldLabel == "MenuItemCategoryId") return _categories.FirstOrDefault(it => it.Id == id);

		throw new NotImplementedException();
	}

}
